{"mappings":"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","sources":["src/js/google.js"],"sourcesContent":[" \nconst TOKEN = '6279094717:AAEINNI-WB8PTYW-nQglKgNdX6lALH6T6A0';\nconst CHAT_ID = '-1001887598395';\nconst URI_API = `https://api.telegram.org/bot${TOKEN}/sendMessage`;\n\nbigForm = document.querySelector('.modal__form'),\nbigForm.addEventListener('submit', modalFormSubmit);\n\n    function ban(event) {\n    if(event.keyCode == 13) {\n        event.preventDefault();\n    }\n    if(event.keyCode == 37) {\n        event.preventDefault();\n    }\n    if(event.keyCode == 38) {\n        event.preventDefault();\n    }\n    if(event.keyCode == 39) {\n        event.preventDefault();\n    }\n    if(event.keyCode == 40) {\n        event.preventDefault();\n    }\n};\nasync function modalFormSubmit(event) {\n    event.preventDefault();\n    const formData = new FormData(event.currentTarget);\n    formData.append('object', address.formatted_address);\n    console.log(formData);\n    // console.log(address.formatted_address);\n    let error = 0;\n    // formValidate(bigForm);\n    // if (formData) {\n    // }\n    formData.forEach((x, y) => {\n        console.log(x);\n        console.log(y);\n        \n        \n    });\n    if (error === 0) {\n        onLastStepBtnClick()\n        let messageToTg = `<b>New order</b>\\n`;\n        function sendMessage() {\n            for (let entry of formData.entries()) {\n                console.log(entry);\n                if (entry[1] != '') {\n                    messageToTg += ` ${entry.join(\" : \")}\\n`;\n                    console.log(messageToTg);\n                }\n            }\n            return messageToTg;\n        };\n        sendMessage();\n        axios.post(URI_API, {\n            chat_id: CHAT_ID,\n            parse_mode: 'html',\n            text: messageToTg,\n        });\n    }\n    // function formValidate(bigForm) {\n    //     let error = 0;\n    //     let formReq = document.querySelectorAll('._req-big');\n    //     console.log(formReq);\n        \n\n    //     for (let index = 0; index < formReq.length; index++) {\n    //         const input = formReq[index];\n    //         formRemoveError(input);\n    //         if (input.classList.contains('_req-big-tel')) {\n    //             if (telTest(input)) {\n    //                 formAddError(input);\n    //                 error++;\n    //             }\n    //         }\n    //         else {\n    //             if (input.value === '') {\n    //                 formAddError(input);\n    //                 error++;\n    //             }\n    //         }\n    //     }\n    //     return error;\n    // }\n\n    function formAddError(input) {\n        input.classList.add('_error');\n        input.classList.add('_error');\n    }\n    function formRemoveError(input) {\n        input.classList.remove('_error');\n        input.classList.remove('_error');\n    }\n    function telTest(input) {\n        return !/^(\\s*)?(\\+)?([- _():=+]?\\d[- _():=+]?){10,14}(\\s*)?$/.test(input.value);\n    }\n}\n\n    const address = {};\n    let autocomplete;\n    function initAutocomplete() {\n        autocomplete = new google.maps.places.Autocomplete(\n            document.getElementById('pac-input'),\n            {\n                types: ['address'],\n                componentRestrictions: { country: [\"us\"] },\n                // fields: [\"address_components\"],\n                // fields: [\"address\"],\n                // fields: ['place_id', 'geometry', 'name'],\n            });\n        autocomplete.addListener('place_changed', onPlaceChange);\n    }\n\nlet place;\n\nfunction onPlaceChange() {\n    place = autocomplete.getPlace();\n    console.log(place);\n    console.log(place.address_components);\n\nparseAddress(place);\n\n}\n\n\nconst parseAddress = (place) => {\n    // const address = {};\n    console.log(address);\n    if (!Array.isArray(place.address_components)) {\n        throw Error('Address Components is not an array')\n    }\n    if (!place.address_components.length) {\n        throw Error('Address Components is empty')\n    }\n    const isStreetNumber = (component) => {\n        return component.types.includes('street_number')\n    }\n    const isStreetName = (component) => {\n        return component.types.includes('route')\n    }\n    const isCity = (component) => {\n        if (component.types.includes('locality') || component.types.includes('sublocality') ||\n            component.types.includes('administrative_area_level_3')) {\n            return !0\n        } else if (component.types.includes('neighborhood') && component.types.includes('political')) {\n            address.prev_city_component = 'neighborhood'; return !0\n        } else { return !1 }\n    }\n    const isState = (component) => {\n        return component.types.includes('administrative_area_level_1')\n    }\n    const isCountry = (component) => {\n        return component.types.includes('country')\n    }\n    const isCounty = (component) => {\n        return component.types.includes('administrative_area_level_2')\n    }\n    const isPostalCode = (component) => {\n        return component.types.includes('postal_code')\n    }\n    const isStreetAddress = (component) => {\n        return component.types.includes('street_address')\n    }\n        \n\n    for (const addressComponent of place.address_components) {\n        const component = addressComponent;\n        if (isStreetNumber(component)) {\n            address.street_number = component.long_name\n        }\n        if (isStreetName(component)) {\n            address.street_name = component.long_name\n        }\n        if (isCity(component) && (!address.city || address.prev_city_component === 'neighborhood')) {\n            address.city = component.long_name\n        }\n        if (isCountry(component)) {\n            address.country = component.long_name\n        }\n        if (isCounty(component)) {\n            address.county = component.long_name\n        }\n        if (isState(component)) {\n            address.state = component.long_name\n        }\n        if (isPostalCode(component)) {\n            address.postal_code = component.long_name\n        }\n    }\n    if (place.types.includes('locality')) {\n        address.type = 'city'\n    } else if (place.types.includes('administrative_area_level_1')) {\n        address.type = 'state'\n    } else if (place.types.includes('street_address') || place.types.includes('route') || place.types.includes('premise')) {\n        address.type = 'street_address'\n    } else if (place.types.includes('lcountry')) {\n        address.type = 'country'\n    } else {\n        address.type = null\n    }\n    address.formatted_address = place.formatted_address;\n    console.log(address);\n      \t\n    //  document.getElementById('bbbbb').innerHTML = address.formatted_address;\n    return address\n}\n"],"names":["TOKEN","CHAT_ID","URI_API","ban","event","keyCode","preventDefault","async","modalFormSubmit","formData","FormData","currentTarget","append","address","formatted_address","console","log","forEach","x","y","onLastStepBtnClick","messageToTg","entry","entries","join","sendMessage","axios","post","chat_id","parse_mode","text","bigForm","document","querySelector","addEventListener","autocomplete","place","initAutocomplete","google","maps","places","Autocomplete","getElementById","types","componentRestrictions","country","addListener","onPlaceChange","getPlace","address_components","parseAddress","place1","Array","isArray","Error","length","isStreetNumber","component","includes","isStreetName","isCity","prev_city_component","isState","isCountry","isCounty","isPostalCode","addressComponent","street_number","long_name","street_name","city","county","state","postal_code","type"],"version":3,"file":"shopping-list.beb3adb0.js.map"}