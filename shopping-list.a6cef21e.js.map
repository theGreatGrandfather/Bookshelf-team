{"mappings":"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","sources":["src/js/google.js"],"sourcesContent":["import axios from \"axios\";\n\nconst TOKEN = '6279094717:AAEINNI-WB8PTYW-nQglKgNdX6lALH6T6A0';\nconst CHAT_ID = '-1001887598395';\nconst URI_API = `https://api.telegram.org/bot${TOKEN}/sendMessage`;\n\nlet autocomplete;\nfunction loadGoogleMapsScript() {\n    const script = document.createElement('script');\n    script.src = `https://maps.googleapis.com/maps/api/js?key=AIzaSyDW-p4nZpSUbbOWr0MdEUruheMS1uooSQw&libraries=places&callback=initAutocomplete`;\n    script.async = true;\n    script.defer = true;\n\n    window.initAutocomplete = function () {\n        autocomplete = new google.maps.places.Autocomplete(\n        document.getElementById('pac-input'),\n        {\n            types: ['address'],\n            componentRestrictions: { country: [\"us\"] },\n        });\n    autocomplete.addListener('place_changed', onPlaceChange);\n    };\n    const scriptTag = document.getElementById('google-maps-script');\n    scriptTag.parentNode.insertBefore(script, scriptTag);\n}\n\nloadGoogleMapsScript();\n\nconst bigForm = document.querySelector('.modal__form');\nbigForm.addEventListener('submit', modalFormSubmit);\n\n    function ban(event) {\n    if(event.keyCode == 13) {\n        event.preventDefault();\n    }\n    if(event.keyCode == 37) {\n        event.preventDefault();\n    }\n    if(event.keyCode == 38) {\n        event.preventDefault();\n    }\n    if(event.keyCode == 39) {\n        event.preventDefault();\n    }\n    if(event.keyCode == 40) {\n        event.preventDefault();\n    }\n};\nasync function modalFormSubmit(event) {\n    event.preventDefault();\n    const formData = new FormData(bigForm);\n    formData.append('object', address.formatted_address);\n    let error = formValidate(bigForm);\n    if (error === 0) {\n        let messageToTg = `<b>New order</b>\\n`;\n        function sendMessage() {\n            for (let entry of formData.entries()) {\n                if (entry[1] != '') {\n                    messageToTg += ` ${entry.join(\" : \")}\\n`;\n                }\n            }\n            return messageToTg;\n        };\n        sendMessage();\n        axios.post(URI_API, {\n            chat_id: CHAT_ID,\n            parse_mode: 'html',\n            text: messageToTg,\n        }).then(\n            console.log('then')\n        );\n    }\n    function formValidate(bigForm) {\n        let error = 0;\n        let formReq = document.querySelectorAll('._req-big');\n        for (let index = 0; index < formReq.length; index++) {\n            const input = formReq[index];\n            formRemoveError(input);\n            if (input.classList.contains('_req-big-tel')) {\n                if (telTest(input)) {\n                    formAddError(input);\n                    error++;\n                }\n            }\n            else {\n                if (input.value === '') {\n                    formAddError(input);\n                    error++;\n                }\n            }\n        }\n        return error;\n    }\n    function formAddError(input) {\n        input.classList.add('_error');\n        input.classList.add('_error');\n    }\n    function formRemoveError(input) {\n        input.classList.remove('_error');\n        input.classList.remove('_error');\n    }\n    function telTest(input) {\n        return !/^(\\s*)?(\\+)?([- _():=+]?\\d[- _():=+]?){10,14}(\\s*)?$/.test(input.value);\n    }\n};\n\n\nconst address = {};\n \n\nlet place;\n\nfunction onPlaceChange() {\n    place = autocomplete.getPlace();\n    parseAddress(place);\n\n}\n\nconst parseAddress = (place) => {\n    if (!Array.isArray(place.address_components)) {\n        throw Error('Address Components is not an array')\n    }\n    if (!place.address_components.length) {\n        throw Error('Address Components is empty')\n    }\n    const isStreetNumber = (component) => {\n        return component.types.includes('street_number')\n    }\n    const isStreetName = (component) => {\n        return component.types.includes('route')\n    }\n    const isCity = (component) => {\n        if (component.types.includes('locality') || component.types.includes('sublocality') ||\n            component.types.includes('administrative_area_level_3')) {\n            return !0\n        } else if (component.types.includes('neighborhood') && component.types.includes('political')) {\n            address.prev_city_component = 'neighborhood'; return !0\n        } else { return !1 }\n    }\n    const isState = (component) => {\n        return component.types.includes('administrative_area_level_1')\n    }\n    const isCountry = (component) => {\n        return component.types.includes('country')\n    }\n    const isCounty = (component) => {\n        return component.types.includes('administrative_area_level_2')\n    }\n    const isPostalCode = (component) => {\n        return component.types.includes('postal_code')\n    }\n    const isStreetAddress = (component) => {\n        return component.types.includes('street_address')\n    }\n        \n\n    for (const addressComponent of place.address_components) {\n        const component = addressComponent;\n        if (isStreetNumber(component)) {\n            address.street_number = component.long_name\n        }\n        if (isStreetName(component)) {\n            address.street_name = component.long_name\n        }\n        if (isCity(component) && (!address.city || address.prev_city_component === 'neighborhood')) {\n            address.city = component.long_name\n        }\n        if (isCountry(component)) {\n            address.country = component.long_name\n        }\n        if (isCounty(component)) {\n            address.county = component.long_name\n        }\n        if (isState(component)) {\n            address.state = component.long_name\n        }\n        if (isPostalCode(component)) {\n            address.postal_code = component.long_name\n        }\n    }\n    if (place.types.includes('locality')) {\n        address.type = 'city'\n    } else if (place.types.includes('administrative_area_level_1')) {\n        address.type = 'state'\n    } else if (place.types.includes('street_address') || place.types.includes('route') || place.types.includes('premise')) {\n        address.type = 'street_address'\n    } else if (place.types.includes('lcountry')) {\n        address.type = 'country'\n    } else {\n        address.type = null\n    }\n    address.formatted_address = place.formatted_address;\n\n    return address\n}\n\n"],"names":["$2shzp","parcelRequire","$e5f544ba13c413a1$var$autocomplete","script","document","createElement","src","async","defer","window","initAutocomplete","google","maps","places","Autocomplete","getElementById","types","componentRestrictions","country","addListener","$e5f544ba13c413a1$var$onPlaceChange","scriptTag","parentNode","insertBefore","$e5f544ba13c413a1$var$loadGoogleMapsScript","$e5f544ba13c413a1$var$bigForm","querySelector","addEventListener","event","preventDefault","formData","FormData","append","$e5f544ba13c413a1$var$address","formatted_address","bigForm","error","formReq","querySelectorAll","index","length","input","formRemoveError","classList","contains","telTest","formAddError","value","formValidate","messageToTg","entry","entries","join","sendMessage","default","post","chat_id","parse_mode","text","then","console","log","add","remove","test","$e5f544ba13c413a1$var$place","getPlace","$e5f544ba13c413a1$var$parseAddress","place1","Array","isArray","address_components","Error","isStreetNumber","component","includes","isStreetName","isCity","prev_city_component","isState","isCountry","isCounty","isPostalCode","addressComponent","street_number","long_name","street_name","city","county","state","postal_code","type"],"version":3,"file":"shopping-list.a6cef21e.js.map"}